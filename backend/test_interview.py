#!/usr/bin/env python3
import sys
import os
import importlib
from dotenv import load_dotenv

load_dotenv()

print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´ –ò–ù–¢–ï–†–í–¨–Æ")
print("=" * 50)
print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
print(f"Python: {sys.executable}")

def test_basic():
    print("üîç –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç...")
    try:
        import PyPDF2
        print("‚úÖ PyPDF2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå PyPDF2: {e}")
        return False

def test_docx():
    print("üìÑ –¢–µ—Å—Ç docx...")
    try:
        import docx
        print("‚úÖ python-docx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå docx: {e}")
        return False

def test_langchain():
    print("ü§ñ –¢–µ—Å—Ç LangChain...")
    try:
        import langchain_openai
        print("‚úÖ langchain-openai —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå langchain: {e}")
        return False

def test_spacy():
    print("üî§ –¢–µ—Å—Ç spaCy...")
    try:
        import spacy
        print("‚úÖ spaCy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå spaCy: {e}")
        return False

def test_sklearn():
    print("üìä –¢–µ—Å—Ç scikit-learn...")
    try:
        import sklearn
        print("‚úÖ scikit-learn —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå scikit-learn: {e}")
        return False

def test_openai_key():
    print("üîë –¢–µ—Å—Ç OpenAI –∫–ª—é—á–∞...")
    api_key = os.environ.get('OPENAI_API_KEY')
    if api_key:
        print(f"‚úÖ OPENAI_API_KEY: {api_key[:10]}...")
        return True
    else:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üëâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ export OPENAI_API_KEY='–≤–∞—à_–∫–ª—é—á'")
        return False

if __name__ == "__main__":
    print("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")
    tests = [test_basic, test_docx, test_langchain, test_spacy, test_sklearn, test_openai_key]
    
    results = []
    for test in tests:
        results.append(test())
        print()
    
    passed = sum(results)
    total = len(results)
    print("=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π. –†–µ—à–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –æ—à–∏–±–∫–∏.")
    
    print("=" * 50)
